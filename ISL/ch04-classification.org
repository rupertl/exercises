#+TITLE: Introduction to Statistical Learning, Chapter 4: Classification
#+AUTHOR: Rupert Lane
#+EMAIL: rupert@rupert-lane.org
#+PROPERTY: header-args:R :session *R*
#+STARTUP: inlineimages
#+STARTUP: latexpreview

* Conceptual
** Question 1
#+BEGIN_QUOTE
Using a little bit of algebra, prove that (4.2) is equivalent to
(4.3). In other words, the logistic function representation and logit
representation for the logistic regression model are equivalent.
#+END_QUOTE

#+BEGIN_SRC latex :exports results :results raw  :file img/ch04q01_1.png
$$\frac{p(X)}{1 - p(X)} = \frac{\frac{e^{\beta_0 + \beta_1X}}{1+e^{\beta_0 + \beta_1X}}}{1 - \frac{e^{\beta_0 + \beta_1X}}{1+e^{\beta_0 + \beta_1X}}}$$
$$\frac{p(X)}{1 - p(X)} = \frac{e^{\beta_0 + \beta_1X}}{1 + e^{\beta_0 + \beta_1X} - e^{\beta_0 + \beta_1X}}$$
$$\frac{p(X)}{1 - p(X)} = e^{\beta_0 + \beta_1X}$$
#+END_SRC

#+RESULTS:
[[file:img/ch04q01_1.png]]

** Question 2
#+BEGIN_QUOTE
It was stated in the text that classifying an observation to the class
for which (4.12) is largest is equivalent to classifying an
observation to the class for which (4.13) is largest. Prove that this
is the case. In other words, under the assumption that the
observations in the /k/-th class are drawn from a /N(μₖ,σ²)/
distribution, the Bayes’ classifier assigns an observation to the
class for which the discriminant function is maximized.
#+END_QUOTE

As we are finding the largest vales of /pₖ(x)/ we can drop the
denominator of (4.12) as it is common. We can then take logs and
expand the terms.

#+BEGIN_SRC latex :exports results :results raw  :file img/ch04q02_1.png
$$\log(\pi_k) - \log(\sqrt{2\pi{\sigma}}) - \frac{(x - \mu_k)^2}{2\sigma^2}$$
$$= \log(\pi_k) - \log(\sqrt{2\pi{\sigma}}) - \frac{x^2}{2\sigma^2} + \frac{x\mu_k}{\sigma^2} - \frac{\mu_k^2}{2\sigma^2}$$
#+END_SRC

#+RESULTS:
[[file:img/ch04q02_1.png]]

Removing the terms that do not depend on /k/:

#+BEGIN_SRC latex :exports results :results raw  :file img/ch04q02_2.png
$$= \log(\pi_k) + \frac{x\mu_k}{\sigma^2} - \frac{\mu_k^2}{2\sigma^2}$$
#+END_SRC

#+RESULTS:
[[file:img/ch04q02_2.png]]

which is equivalent to (4.13).
** Question 3
#+BEGIN_QUOTE
This problem relates to the QDA model, in which the observations
within each class are drawn from a normal distribution with a class-
specific mean vector and a class specific covariance matrix. We
consider the simple case where /p = 1/; i.e. there is only one
feature. Suppose that we have /K/ classes, and that if an observation
belongs to the /k/-th class then /X/ comes from a one-dimensional
normal distribution, /X ∼ N(μₖ, σₖ²)/. Recall that the density
function for the one-dimensional normal distribution is given in
(4.11). Prove that in this case, the Bayes’ classifier is not linear.
Argue that it is in fact quadratic.

Hint: For this problem, you should follow the arguments laid out in
Section 4.4.2, but without making the assumption that /σ₁² = ... σₖ²/.
#+END_QUOTE

Briefly, in question 2 we could remove the /x²/ term because the
denominator did not depend on /k/; in this case it does, so the
expression is quadratic.
** Question 4
#+BEGIN_QUOTE
When the number of features /p/ is large, there tends to be a
deterioration in the performance of KNN and other local approaches
that perform prediction using only observations that are near the test
observation for which a prediction must be made. This phenomenon is
known as the /curse of dimensionality/, and it ties into the fact that
non-parametric approaches often perform poorly when /p/ is large. We
will now investigate this curse.
#+END_QUOTE
*** (a)
#+BEGIN_QUOTE
Suppose that we have a set of observations, each with measurements on
/p/ = 1 feature, /X/. We assume that /X/ is uniformly (evenly)
distributed on [0, 1]. Associated with each observation is a response
value. Suppose that we wish to predict a test observation’s response
using only observations that are within 10% of the range of /X/
closest to that test observation. For instance, in order to predict
the response for a test observation with /X/ = 0.6, we will use
observations in the range [0.55, 0.65]. On average, what fraction of
the available observations will we use to make the prediction?
#+END_QUOTE

As it's uniformly distributed, 10%.
*** (b)
#+BEGIN_QUOTE
Now suppose that we have a set of observations, each with measurements
on /p/ = 2 features, /X₁/ and /X₂/ . We assume that /(X₁, X₂)/ are
uniformly distributed on [0, 1] × [0, 1]. We wish to predict a test
observation’s response using only observations that are within 10% of
the range of /X₁/ and within 10% of the range of /X₂/ closest to that
test observation. For instance, in order to predict the response for a
test observation with /X₁/ = 0.6 and /X₂/ = 0.35, we will use
observations in the range [0.55, 0.65] for /X₁/ and in the range [0.3,
0.4] for /X₂/ . On average, what fraction of the available
observations will we use to make the prediction?
#+END_QUOTE

We can plot the observation space as a square with /X₁/ on one axis
and /X₂/ on the other. The area of the total space is 1*1. The area of
the range we want to take observations from is 0.1*0.1 = 0.01, so the
fraction of available observations is 0.01/1 or 1% of the total area.
*** (c)
#+BEGIN_QUOTE
Now suppose that we have a set of observations on /p/ = 100 features.
Again the observations are uniformly distributed on each feature, and
again each feature ranges in value from 0 to 1. We wish to predict a
test observation’s response using observations within the 10% of each
feature’s range that is closest to that test observation. What
fraction of the available observations will we use to make the
prediction?
#+END_QUOTE

We can use the previous concept but extended to a 100 dimension
hypercube. The fraction would be 0.1 ^ 100 = 1.0E-100.
*** (d)
#+BEGIN_QUOTE
Using your answers to parts (a)–(c), argue that a drawback of KNN when
p is large is that there are very few training observations “near” any
given test observation.
#+END_QUOTE

As the number of dimensions increases, the chance of finding a close
observation decreases exponentially.
*** (e)
#+BEGIN_QUOTE
Now suppose that we wish to make a prediction for a test observation
by creating a /p/-dimensional hypercube centred around the test
observation that contains, on average, 10% of the training
observations. For /p/ = 1, 2, and 100, what is the length of each side
of the hypercube? Comment on your answer. 

/Note: A hypercube is a generalization of a cube to an arbitrary number
of dimensions. When p = 1, a hypercube is simply a line segment, when/
/p = 2 it is a square, and when p = 100 it is a 100-dimensional cuve/
#+END_QUOTE

For /p/ = 1, it's simply 10% of the line, so 0.1. For /p/ = 2, the
area of the hypercube will be 0.1 so the sides will be sqrt(0.1) or
around 0.316.

For /p/ = 100, we extend the previous calculation and get 0.1 ^ 1/100
or around 0.977. As the total area of the hypercube is 1, we need to
take observations from 97.7% of its volume. 
** Question 5
#+BEGIN_QUOTE
We now examine the differences between LDA and QDA.
#+END_QUOTE
*** (a)
#+BEGIN_QUOTE
If the Bayes decision boundary is linear, do we expect LDA or
QDA to perform better on the training set? On the test set?
#+END_QUOTE

For training, QDA will perform better as more flexible. But for test,
the QDA model will overfit so LDA should be better.
*** (b)
#+BEGIN_QUOTE
If the Bayes decision boundary is non-linear, do we expect LDA
or QDA to perform better on the training set? On the test set?
#+END_QUOTE

QDA will be better for training as before. For test, QDA will be
better as is closer to the true non-linear nature of the data than
LDA.
*** (c)
#+BEGIN_QUOTE
In general, as the sample size n increases, do we expect the test
prediction accuracy of QDA relative to LDA to improve, decline,
or be unchanged? Why?
#+END_QUOTE

As samples increase, the more flexible model (QDA) will do better as
the variance decreases.
*** (d)
#+BEGIN_QUOTE
True or False: Even if the Bayes decision boundary for a given problem
is linear, we will probably achieve a superior test error rate using
QDA rather than LDA because QDA is flexible enough to model a linear
decision boundary. Justify your answer.
#+END_QUOTE

False, as QDA will overfit on the training data and will perform more
poorly on the test data then the less flexible LDA would.
** Question 6
#+BEGIN_QUOTE
Suppose we collect data for a group of students in a statistics class
with variables /X₁/ = hours studied, /X₂/ = undergrad GPA, and /Y/ =
receive an A. We fit a logistic regression and produce estimated
coefficient, /β̂₀/ = −6, /β̂₁/ = 0.05, /β̂₂/ = 1.
#+END_QUOTE
*** (a)
#+BEGIN_QUOTE
Estimate the probability that a student who studies for 40 h and has
an undergrad GPA of 3.5 gets an A in the class.
#+END_QUOTE

From (4.7): 

#+BEGIN_SRC latex :exports results :results raw  :file img/ch04q06a.png
$$p(X) = \frac{e^{\beta_0 + \beta_{1}X_1 +\beta_{2}X_2}}{1 + e^{\beta_0 + \beta_{1}X_1 +\beta_{2}X_2}}$$
#+END_SRC

#+RESULTS:
[[file:img/ch04q06a.png]]

so the probability is 0.378.
*** (b)
#+BEGIN_QUOTE
How many hours would the student in part (a) need to study to have a
50 % chance of getting an A in the class?
#+END_QUOTE

From (4.6) and solving for /X₁/: 
#+BEGIN_SRC latex :exports results :results raw  :file img/ch04q06b.png
$$\log{(\frac{p(X)}{1 - p(X)})} = \beta_0 + \beta_{1}X_1 +\beta_{2}X_2$$
$$0 = -6 + 0.05X_1 + 3.5$$
$$X_1 = 50$$
#+END_SRC

#+RESULTS:
[[file:img/ch04q06b.png]]

** Question 7
#+BEGIN_QUOTE
Suppose that we wish to predict whether a given stock will issue a
dividend this year (“Yes” or “No”) based on /X/, last year’s percent
profit. We examine a large number of companies and discover that the
mean value of /X/ for companies that issued a dividend was /X̄/ = 10,
while the mean for those that didn’t was /X̄/ = 0. In addition, the
variance of /X/ for these two sets of companies was /σ̂²/ = 36. Finally,
80% of companies issued dividends. Assuming that /X/ follows a normal 
distribution, predict the probability that a company will issue
a dividend this year given that its percentage profit was /X/ = 4 last
year.

/Hint: Recall that the density function for a normal random variable is
(...). You will need to use Bayes’ theorem./
#+END_QUOTE

From (4.10), and assigning /k/ = 1 to be "Yes":

#+BEGIN_SRC latex :exports results :results raw  :file img/ch04q07_1.png
$$Pr(Y = k|X = x) = \frac{\pi_{k}f_{k}(x)}{\sum_{i=1}^{K}\pi_{i}f_{i}(x)}$$
$$f(x) = \frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$$
$$\pi_1 = 0.8, \pi_2 = 0.2$$
$$f_1(4) = \frac{1}{\sqrt{2*\pi*36}}e^{-\frac{(4-10)^2}{2*36}} = 0.0403$$
$$f_2(4) = \frac{1}{\sqrt{2*\pi*36}}e^{-\frac{(4-0)^2}{2*36}} = 0.0532$$
$$Pr(Y = 1|X = 4) = \frac{0.8 * 0.0403}{(0.8 * 0.0403) + (0.2 * 0.0532)} = 0.7512$$

#+END_SRC

#+RESULTS:
[[file:img/ch04q07_1.png]]

So the probability the company will issue a dividend is approximately
0.7512.

Note: I initially made the mistake that the /π/ in the density
function was the prior probability; it is of course just the constant
3.1416...
** Question 8
#+BEGIN_QUOTE
Suppose that we take a data set, divide it into equally-sized training
and test sets, and then try out two different classification
procedures. First we use logistic regression and get an error rate of
20% on the training data and 30% on the test data. Next we use
1-nearest neighbors (i.e. /K/ = 1) and get an average error rate
(averaged over both test and training data sets) of 18%. Based on
these results, which method should we prefer to use for classification
of new observations? Why?
#+END_QUOTE

We want the method that has the lowest error rate on the test data.
For logistic regression, this is 30%. For kNN, the average rate for
both test and training data is 18%. But as the training error is 0%
(as each point classifies to itself) the test error must be 36% (18% =
(0 + 36%)/2). So logistic regression performs better here.
** Question 9
#+BEGIN_QUOTE
This problem has to do with odds.

(a) On average, what fraction of people with an odds of 0.37 of
defaulting on their credit card payment will in fact default?

(b) Suppose that an individual has a 16 % chance of defaulting on
her credit card payment. What are the odds that she will default?
#+END_QUOTE

odds = p/1-p and p = odds/1+odds.

So for (a), p = 0.37/1.37 = 0.270.

For (b) odds = 0.16/0.84 = 0.190.

* Applied
#+BEGIN_SRC R :exports code :results none
  library(tidyverse)
  library(ggplot2)
  library(ISLR)
  library(GGally)
  library(MASS)
  library(class)

  options(crayon.enabled = FALSE)
#+END_SRC
** Question 10
#+BEGIN_QUOTE
This question should be answered using the ~Weekly~ data set, which is
part of the ~ISLR~ package. This data is similar in nature to the
~Smarket~ data from this chapter’s lab, except that it contains 1,089
weekly returns for 21 years, from the beginning of 1990 to the end of 2010.
#+END_QUOTE

#+BEGIN_SRC R :exports code :results none
  weekly <- as_tibble(Weekly)
#+END_SRC 
*** (a)
#+BEGIN_QUOTE
Produce some numerical and graphical summaries of the ~Weekly~
data. Do there appear to be any patterns?
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  glimpse(weekly)
#+END_SRC 

#+RESULTS:
#+begin_example
Observations: 1,089
Variables: 9
$ Year      <dbl> 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 199...
$ Lag1      <dbl> 0.816, -0.270, -2.576, 3.514, 0.712, 1.178, -1.372, 0.807...
$ Lag2      <dbl> 1.572, 0.816, -0.270, -2.576, 3.514, 0.712, 1.178, -1.372...
$ Lag3      <dbl> -3.936, 1.572, 0.816, -0.270, -2.576, 3.514, 0.712, 1.178...
$ Lag4      <dbl> -0.229, -3.936, 1.572, 0.816, -0.270, -2.576, 3.514, 0.71...
$ Lag5      <dbl> -3.484, -0.229, -3.936, 1.572, 0.816, -0.270, -2.576, 3.5...
$ Volume    <dbl> 0.1549760, 0.1485740, 0.1598375, 0.1616300, 0.1537280, 0....
$ Today     <dbl> -0.270, -2.576, 3.514, 0.712, 1.178, -1.372, 0.807, 0.041...
$ Direction <fct> Down, Down, Up, Up, Up, Down, Up, Up, Up, Down, Down, Up,...
#+end_example

So this has similar variables to the ~Smarket~ data set.

#+BEGIN_SRC R :results output :exports both
  weekly %>% dplyr::select(-Direction) %>% cor
#+END_SRC 

#+RESULTS:
#+begin_example
              Year         Lag1        Lag2        Lag3         Lag4
Year    1.00000000 -0.032289274 -0.03339001 -0.03000649 -0.031127923
Lag1   -0.03228927  1.000000000 -0.07485305  0.05863568 -0.071273876
Lag2   -0.03339001 -0.074853051  1.00000000 -0.07572091  0.058381535
Lag3   -0.03000649  0.058635682 -0.07572091  1.00000000 -0.075395865
Lag4   -0.03112792 -0.071273876  0.05838153 -0.07539587  1.000000000
Lag5   -0.03051910 -0.008183096 -0.07249948  0.06065717 -0.075675027
Volume  0.84194162 -0.064951313 -0.08551314 -0.06928771 -0.061074617
Today  -0.03245989 -0.075031842  0.05916672 -0.07124364 -0.007825873
               Lag5      Volume        Today
Year   -0.030519101  0.84194162 -0.032459894
Lag1   -0.008183096 -0.06495131 -0.075031842
Lag2   -0.072499482 -0.08551314  0.059166717
Lag3    0.060657175 -0.06928771 -0.071243639
Lag4   -0.075675027 -0.06107462 -0.007825873
Lag5    1.000000000 -0.05851741  0.011012698
Volume -0.058517414  1.00000000 -0.033077783
Today   0.011012698 -0.03307778  1.000000000
#+end_example

Again similar to ~Smarket~, The only correlation that stands out is
~Year~ against ~Volume~.

#+BEGIN_SRC R :exports both :results graphics  :file img/ch04q10a_1.png :width 800 :height 800
  ggpairs(weekly, progress=FALSE)
#+END_SRC

#+RESULTS:
[[file:img/ch04q10a_1.png]]

No patterns stand out here either.
*** (b)
#+BEGIN_QUOTE
Use the full data set to perform a logistic regression with
~Direction~ as the response and the five lag variables plus ~Volume~
as predictors. Use the summary function to print the results. Do any
of the predictors appear to be statistically significant? If so, which
ones?
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  lrModel <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
                 data = weekly, family = binomial)
  summary(lrModel)
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
glm(formula = Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + 
    Volume, family = binomial, data = weekly)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.6949  -1.2565   0.9913   1.0849   1.4579  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)   
(Intercept)  0.26686    0.08593   3.106   0.0019 **
Lag1        -0.04127    0.02641  -1.563   0.1181   
Lag2         0.05844    0.02686   2.175   0.0296 * 
Lag3        -0.01606    0.02666  -0.602   0.5469   
Lag4        -0.02779    0.02646  -1.050   0.2937   
Lag5        -0.01447    0.02638  -0.549   0.5833   
Volume      -0.02274    0.03690  -0.616   0.5377   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1496.2  on 1088  degrees of freedom
Residual deviance: 1486.4  on 1082  degrees of freedom
AIC: 1500.4

Number of Fisher Scoring iterations: 4
#+end_example

~Lag2~ appears to be statistically significant, with a Pr(z) below
0.05.
*** (c)
#+BEGIN_QUOTE
Compute the confusion matrix and overall fraction of correct
predictions. Explain what the confusion matrix is telling you
about the types of mistakes made by logistic regression.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  lrPredict <- data_frame(prob=predict(lrModel, type="response"),
                          predict=ifelse(prob > 0.5, "Up", "Down"),
                          actual=weekly$Direction)
  table(lrPredict$predict, lrPredict$actual)
#+END_SRC 

#+RESULTS:
: 
:       
:        Down  Up
:   Down   54  48
:   Up    430 557

So the model made 54+557=611 correct predictions and 430+48=478
incorrect ones, ie 56.1%. Not very good to base an investment strategy
on!
*** (d)
#+BEGIN_QUOTE
Now fit the logistic regression model using a training data period
from 1990 to 2008, with ~Lag2~ as the only predictor. Compute the
confusion matrix and the overall fraction of correct predictions
for the held out data (that is, the data from 2009 and 2010).
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  weeklyTrain <- filter(weekly, Year <= 2008)
  weeklyTest <- filter(weekly, Year > 2008)
  lrModelLag2 <- glm(Direction ~ Lag2, data = weeklyTrain, family = binomial)
  summary(lrModelLag2)
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
glm(formula = Direction ~ Lag2, family = binomial, data = weeklyTrain)

Deviance Residuals: 
   Min      1Q  Median      3Q     Max  
-1.536  -1.264   1.021   1.091   1.368  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)   
(Intercept)  0.20326    0.06428   3.162  0.00157 **
Lag2         0.05810    0.02870   2.024  0.04298 * 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1354.7  on 984  degrees of freedom
Residual deviance: 1350.5  on 983  degrees of freedom
AIC: 1354.5

Number of Fisher Scoring iterations: 4
#+end_example

So ~Lag2~ looks to be statistically significant, though with a higher
Pr(z) than the previous model. Let's try predicting the test values.

#+BEGIN_SRC R :results output :exports both
  lrPredictLag2 <- data_frame(prob=predict(lrModelLag2, weeklyTest, type="response"),
                              predict=ifelse(prob > 0.5, "Up", "Down"),
                              actual=weeklyTest$Direction)
  table(lrPredictLag2$predict, lrPredictLag2$actual)
#+END_SRC 

#+RESULTS:
: 
:       
:        Down Up
:   Down    9  5
:   Up     34 56

We are getting correct predictions 62.5% of the time with this model.
*** (e)
#+BEGIN_QUOTE
Repeat (d) using LDA.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  ldaModelLag2 <- lda(Direction ~ Lag2, data=weeklyTrain)
  ldaModelLag2
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
lda(Direction ~ Lag2, data = weeklyTrain)

Prior probabilities of groups:
     Down        Up 
0.4477157 0.5522843 

Group means:
            Lag2
Down -0.03568254
Up    0.26036581

Coefficients of linear discriminants:
           LD1
Lag2 0.4414162
#+end_example

#+BEGIN_SRC R :results output :exports both
  ldaPredictLag2 <- data_frame(predict=predict(ldaModelLag2, weeklyTest, type="response")$class,
                               actual=weeklyTest$Direction)
  table(ldaPredictLag2$predict, ldaPredictLag2$actual)
#+END_SRC 

#+RESULTS:
: 
:       
:        Down Up
:   Down    9  5
:   Up     34 56

The results are the same as logistic regression.
*** (f)
#+BEGIN_QUOTE
Repeat (d) using QDA.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  qdaModelLag2 <- qda(Direction ~ Lag2, data=weeklyTrain)
  qdaModelLag2
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
qda(Direction ~ Lag2, data = weeklyTrain)

Prior probabilities of groups:
     Down        Up 
0.4477157 0.5522843 

Group means:
            Lag2
Down -0.03568254
Up    0.26036581
#+end_example

#+BEGIN_SRC R :results output :exports both
  qdaPredictLag2 <- data_frame(predict=predict(qdaModelLag2, weeklyTest, type="response")$class,
                               actual=weeklyTest$Direction)
  table(qdaPredictLag2$predict, qdaPredictLag2$actual)
#+END_SRC 

#+RESULTS:
: 
:       
:        Down Up
:   Down    0  0
:   Up     43 61

Interestingly, QDA predicted Up for all the items in the test set. It
was correct 58.7% of the time.
*** (g)
#+BEGIN_QUOTE
Repeat (d) using KNN with K = 1.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  set.seed(1)
  knnModelLag2 = knn(as.matrix(weeklyTrain$Lag2), 
                     as.matrix(weeklyTest$Lag2), 
                     weeklyTrain$Direction, k=1)
  table(knnModelLag2, weeklyTest$Direction)
#+END_SRC 

#+RESULTS:
: 
:             
: knnModelLag2 Down Up
:         Down   21 30
:         Up     22 31

50% accuracy.
*** (h)
#+BEGIN_QUOTE
Which of these methods appears to provide the best results on
this data?
#+END_QUOTE

So logistic regression and LDA perform the best here, with 62.5% accuracy.
*** (i)
#+BEGIN_QUOTE
Experiment with different combinations of predictors, including
possible transformations and interactions, for each of the methods.
Report the variables, method, and associated confusion matrix that
appears to provide the best results on the held out data. Note that
you should also experiment with values for /K/ in the KNN classifier.
#+END_QUOTE

Let's look for a model using interactions with the Lag variables.

#+BEGIN_SRC R :results output :exports both
  lrModelInter <- glm(Direction ~ Lag1*Lag2*Lag3*Lag4*Lag5,
                       data = weeklyTrain, family = binomial)
  summary(lrModelInter)
#+END_SRC 

#+RESULTS:
#+begin_example

Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred

Call:
glm(formula = Direction ~ Lag1 * Lag2 * Lag3 * Lag4 * Lag5, family = binomial, 
    data = weeklyTrain)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-1.9474  -1.2305   0.9088   1.0837   1.9496  

Coefficients:
                           Estimate Std. Error z value Pr(>|z|)    
(Intercept)               0.2285984  0.0677584   3.374 0.000742 ***
Lag1                     -0.0664291  0.0339757  -1.955 0.050560 .  
Lag2                      0.0655016  0.0346970   1.888 0.059050 .  
Lag3                     -0.0083485  0.0349190  -0.239 0.811042    
Lag4                     -0.0445694  0.0349253  -1.276 0.201907    
Lag5                     -0.0338788  0.0348258  -0.973 0.330650    
Lag1:Lag2                -0.0211807  0.0147017  -1.441 0.149670    
Lag1:Lag3                -0.0067933  0.0159686  -0.425 0.670534    
Lag2:Lag3                 0.0176466  0.0141618   1.246 0.212737    
Lag1:Lag4                -0.0135512  0.0144032  -0.941 0.346782    
Lag2:Lag4                 0.0106251  0.0165622   0.642 0.521180    
Lag3:Lag4                 0.0229859  0.0147793   1.555 0.119881    
Lag1:Lag5                -0.0311035  0.0150379  -2.068 0.038608 *  
Lag2:Lag5                -0.0235707  0.0152997  -1.541 0.123414    
Lag3:Lag5                -0.0106199  0.0173098  -0.614 0.539531    
Lag4:Lag5                -0.0016642  0.0117897  -0.141 0.887748    
Lag1:Lag2:Lag3           -0.0099283  0.0051128  -1.942 0.052156 .  
Lag1:Lag2:Lag4           -0.0001545  0.0060813  -0.025 0.979725    
Lag1:Lag3:Lag4           -0.0070164  0.0062492  -1.123 0.261540    
Lag2:Lag3:Lag4           -0.0037996  0.0065916  -0.576 0.564326    
Lag1:Lag2:Lag5           -0.0116971  0.0062289  -1.878 0.060399 .  
Lag1:Lag3:Lag5           -0.0130370  0.0070563  -1.848 0.064663 .  
Lag2:Lag3:Lag5            0.0034557  0.0062083   0.557 0.577787    
Lag1:Lag4:Lag5           -0.0064868  0.0050345  -1.288 0.197582    
Lag2:Lag4:Lag5           -0.0072684  0.0065118  -1.116 0.264336    
Lag3:Lag4:Lag5            0.0043000  0.0054232   0.793 0.427839    
Lag1:Lag2:Lag3:Lag4       0.0005872  0.0020367   0.288 0.773099    
Lag1:Lag2:Lag3:Lag5      -0.0011965  0.0020518  -0.583 0.559810    
Lag1:Lag2:Lag4:Lag5       0.0019855  0.0028128   0.706 0.480266    
Lag1:Lag3:Lag4:Lag5      -0.0042274  0.0022348  -1.892 0.058538 .  
Lag2:Lag3:Lag4:Lag5      -0.0035156  0.0022214  -1.583 0.113512    
Lag1:Lag2:Lag3:Lag4:Lag5  0.0007430  0.0006353   1.169 0.242211    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1354.7  on 984  degrees of freedom
Residual deviance: 1306.7  on 953  degrees of freedom
AIC: 1370.7

Number of Fisher Scoring iterations: 9
#+end_example

#+BEGIN_SRC R :results output :exports both
  lrPredictInter <- data_frame(prob=predict(lrModelInter, weeklyTest, type="response"),
                              predict=ifelse(prob > 0.5, "Up", "Down"),
                              actual=weeklyTest$Direction)
  table(lrPredictInter$predict, lrPredictInter$actual)
#+END_SRC 

#+RESULTS:
: 
:       
:        Down Up
:   Down   18 23
:   Up     25 38

53.8% accuracy. Next, try LDA.

#+BEGIN_SRC R :results output :exports both
    ldaModelInter <- lda(Direction ~ Lag1*Lag2*Lag3*Lag4*Lag5,
                         data = weeklyTrain)
    ldaPredictInter <- data_frame(predict=predict(ldaModelInter, weeklyTest, 
                                                  type="response")$class,
                                  actual=weeklyTest$Direction)
    table(ldaPredictInter$predict, ldaPredictInter$actual)
#+END_SRC 

#+RESULTS:
:       
:        Down Up
:   Down   15 22
:   Up     28 39

52.0% accuracy. Trying QDA.

#+BEGIN_SRC R :results output :exports both
    qdaModelInter <- qda(Direction ~ Lag1*Lag2*Lag3*Lag4*Lag5,
                         data = weeklyTrain)
    qdaPredictInter <- data_frame(predict=predict(qdaModelInter, weeklyTest, 
                                                  type="response")$class,
                                  actual=weeklyTest$Direction)
    table(qdaPredictInter$predict, qdaPredictInter$actual)
#+END_SRC 

#+RESULTS:
: 
:       
:        Down Up
:   Down   17 33
:   Up     26 28

43.3% accuracy. Finally, KNN with several values of /k/.

#+BEGIN_SRC R :results output :exports both
  tr = dplyr::select(weeklyTrain, Lag1, Lag2, Lag3, Lag4, Lag5)
  te = dplyr::select(weeklyTest, Lag1, Lag2, Lag3, Lag4, Lag5)
  knnModelInter1 = knn(tr, te, weeklyTrain$Direction, k=1)
  table(knnModelInter1, weeklyTest$Direction)
#+END_SRC 

#+RESULTS:
: 
:               
: knnModelInter1 Down Up
:           Down   21 28
:           Up     22 33

51.2% accuracy.

#+BEGIN_SRC R :results output :exports both
  knnModelInter1 = knn(tr, te, weeklyTrain$Direction, k=5)
  table(knnModelInter1, weeklyTest$Direction)
#+END_SRC 

#+RESULTS:
: 
:               
: knnModelInter1 Down Up
:           Down   19 23
:           Up     24 38

54.8% accuracy.
** Question 11
#+BEGIN_QUOTE
In this problem, you will develop a model to predict whether a given
car gets high or low gas mileage based on the ~Auto~ data set.
#+END_QUOTE

*** (a)
#+BEGIN_QUOTE
Create a binary variable, ~mpg01~ , that contains a 1 if ~mpg~
contains a value above its median, and a 0 if ~mpg~ contains a value
below its median. You can compute the median using the ~median()~
function. Note you may find it helpful to use the ~data.frame()~
function to create a single data set containing both ~mpg01~ and the
other ~Auto~ variables.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  auto <- Auto %>% as_tibble %>%
    mutate(mpg01 = ifelse(mpg > median(mpg), 1, 0)) %>%
    dplyr::select(-name)
  table(auto$mpg01)
  median(auto$mpg)
#+END_SRC 

#+RESULTS:
: 
:   0   1 
: 196 196
: 
: [1] 22.75

*** (b)
#+BEGIN_QUOTE
Explore the data graphically in order to investigate the association
between ~mpg01~ and the other features. Which of the other features
seem most likely to be useful in predicting ~mpg01~? Scatterplots and
boxplots may be useful tools to answer this ques- tion. Describe your
findings.
#+END_QUOTE

#+BEGIN_SRC R :exports both :results graphics  :file img/ch04q11b_1.png :width 800
  auto %>% mutate(mpg01 = as.factor(mpg01)) %>%
    gather(key="var", value="value", -mpg01) %>%
    ggplot(aes(x=mpg01, y=value)) +
      geom_boxplot() +
      facet_wrap(~ var, scales="free") +
      labs(title = "Boxplots of variables against mpg above median")
#+END_SRC

#+RESULTS:
[[file:img/ch04q11b_1.png]]

#+BEGIN_SRC R :results output :exports both
  auto %>% cor
#+END_SRC

#+RESULTS:
#+begin_example
                    mpg  cylinders displacement horsepower     weight
mpg           1.0000000 -0.7776175   -0.8051269 -0.7784268 -0.8322442
cylinders    -0.7776175  1.0000000    0.9508233  0.8429834  0.8975273
displacement -0.8051269  0.9508233    1.0000000  0.8972570  0.9329944
horsepower   -0.7784268  0.8429834    0.8972570  1.0000000  0.8645377
weight       -0.8322442  0.8975273    0.9329944  0.8645377  1.0000000
acceleration  0.4233285 -0.5046834   -0.5438005 -0.6891955 -0.4168392
year          0.5805410 -0.3456474   -0.3698552 -0.4163615 -0.3091199
origin        0.5652088 -0.5689316   -0.6145351 -0.4551715 -0.5850054
mpg01         0.8369392 -0.7591939   -0.7534766 -0.6670526 -0.7577566
             acceleration       year     origin      mpg01
mpg             0.4233285  0.5805410  0.5652088  0.8369392
cylinders      -0.5046834 -0.3456474 -0.5689316 -0.7591939
displacement   -0.5438005 -0.3698552 -0.6145351 -0.7534766
horsepower     -0.6891955 -0.4163615 -0.4551715 -0.6670526
weight         -0.4168392 -0.3091199 -0.5850054 -0.7577566
acceleration    1.0000000  0.2903161  0.2127458  0.3468215
year            0.2903161  1.0000000  0.1815277  0.4299042
origin          0.2127458  0.1815277  1.0000000  0.5136984
mpg01           0.3468215  0.4299042  0.5136984  1.0000000
#+end_example

~cylinders~, ~displacement~, ~horsepower~ and ~~weight~ all seem correlated.
*** (c)
#+BEGIN_QUOTE
Split the data into a training set and a test set.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  set.seed(1)
  auto$id <- 1:nrow(auto)
  autoTrain <- auto %>% sample_frac(0.75)
  autoTest <- anti_join(auto, autoTrain, by='id')
  nrow(autoTrain)
  nrow(autoTest)
#+END_SRC

#+RESULTS:
: 
: [1] 294
: 
: [1] 98

*** (d)
#+BEGIN_QUOTE
Perform LDA on the training data in order to predict ~mpg01~
using the variables that seemed most associated with ~mpg01~ in
(b). What is the test error of the model obtained?
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
    autoLda <- lda(mpg01 ~ displacement + weight + horsepower + cylinders,
                   data = autoTrain)
    autoLdaPredict <- data_frame(predict=predict(autoLda, autoTest, 
                                                 type="response")$class,
                                 actual=autoTest$mpg01)
    table(autoLdaPredict$predict, autoLdaPredict$actual)
#+END_SRC 

#+RESULTS:
: 
:    
:      0  1
:   0 41  1
:   1  5 51

93.4% accuracy, so 6.6$ error rate.

*** (e)
#+BEGIN_QUOTE
Perform QDA on the training data in order to predict ~mpg01~
using the variables that seemed most associated with ~mpg01~ in
(b). What is the test error of the model obtained?
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
    autoQda <- qda(mpg01 ~ displacement + weight + horsepower + cylinders,
                   data = autoTrain)
    autoQdaPredict <- data_frame(predict=predict(autoQda, autoTest, 
                                                 type="response")$class,
                                 actual=autoTest$mpg01)
    table(autoQdaPredict$predict, autoQdaPredict$actual)
#+END_SRC 

#+RESULTS:
: 
:    
:      0  1
:   0 42  4
:   1  4 48

91.8% accuracy, 8.2% error rate.
*** (f)
#+BEGIN_QUOTE
Perform logistic regression on the training data in order to pre-
dict mpg01 using the variables that seemed most associated with
mpg01 in (b). What is the test error of the model obtained?
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  autoLr <- glm(mpg01 ~ displacement + weight + horsepower + cylinders,
                data = autoTrain, family = binomial)
  summary(autoLr)
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
glm(formula = mpg01 ~ displacement + weight + horsepower + cylinders, 
    family = binomial, data = autoTrain)

Deviance Residuals: 
   Min      1Q  Median      3Q     Max  
-2.301  -0.311  -0.003   0.367   3.266  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)  11.325403   1.889976   5.992 2.07e-09 ***
displacement -0.014188   0.008923  -1.590  0.11182    
weight       -0.001942   0.000790  -2.458  0.01397 *  
horsepower   -0.048469   0.015496  -3.128  0.00176 ** 
cylinders     0.242976   0.385893   0.630  0.52893    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 407.45  on 293  degrees of freedom
Residual deviance: 166.24  on 289  degrees of freedom
AIC: 176.24

Number of Fisher Scoring iterations: 7
#+end_example

#+BEGIN_SRC R :results output :exports both
  autoLrPredict <- data_frame(prob=predict(autoLr, autoTest, type="response"),
                              predict=ifelse(prob > 0.5, 1, 0),
                              actual=autoTest$mpg01)
  table(autoLrPredict$predict, autoLrPredict$actual)
#+END_SRC 

#+RESULTS:
: 
:    
:      0  1
:   0 39  3
:   1  7 49

89.8% accuracy, 10.2% error rate.

*** (g)
#+BEGIN_QUOTE
Perform KNN on the training data, with several values of /K/, in
order to predict ~mpg01~ . Use only the variables that seemed most
associated with ~mpg01~ in (b). What test errors do you obtain?
Which value of /K/ seems to perform the best on this data set?
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  tr = dplyr::select(autoTrain, displacement, weight, horsepower, cylinders)
  te = dplyr::select(autoTest, displacement, weight, horsepower, cylinders)
  autoKnn = knn(tr, te, autoTrain$mpg01, k=1)
  table(autoKnn, autoTest$mpg01)
#+END_SRC 

#+RESULTS:
: 
:        
: autoKnn  0  1
:       0 38  8
:       1  8 44

83.7% accuracy, 16.3% error rate.

#+BEGIN_SRC R :results output :exports both
  autoKnn = knn(tr, te, autoTrain$mpg01, k=5)
  table(autoKnn, autoTest$mpg01)
#+END_SRC 

#+RESULTS:
: 
:        
: autoKnn  0  1
:       0 36  3
:       1 10 49

86.7% accuracy, 13.3% error rate

#+BEGIN_SRC R :results output :exports both
  autoKnn = knn(tr, te, autoTrain$mpg01, k=10)
  table(autoKnn, autoTest$mpg01)
#+END_SRC 

#+RESULTS:
: 
:        
: autoKnn  0  1
:       0 36  2
:       1 10 50

87.8% accuracy, 12.2% error rate.

#+BEGIN_SRC R :results output :exports both
  autoKnn = knn(tr, te, autoTrain$mpg01, k=20)
  table(autoKnn, autoTest$mpg01)
#+END_SRC 

#+RESULTS:
: 
:        
: autoKnn  0  1
:       0 35  2
:       1 11 50

86.7% accuract, 13.3% error rate
** Question 12
#+BEGIN_QUOTE
This problem involves writing functions.
#+END_QUOTE

*** (a)
#+BEGIN_QUOTE
Write a function, ~Power()~ , that prints out the result of raising 2 to
the 3rd power. In other words, your function should compute 2³ and
print out the results. 

/Hint: Recall that ~x^a~ raises x to the power a . Use the ~print()~
function to output the result./
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  Power <- function() {
    print(2^3)
  }

  Power()
#+END_SRC 

#+RESULTS:
: 
: [1] 8

*** (b)
#+BEGIN_QUOTE
Create a new function, ~Power2()~ , that allows you to pass any
two numbers, ~x~ and ~a~ , and prints out the value of ~x^a~ . You can
do this by beginning your function with the line

~> Power2 = function(x, a) {~

You should be able to call your function by entering, for instance,

~> Power2(3, 8)~

on the command line. This should output the value of 3⁸ , namely,
6,561.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  Power2 <- function(x, a) {
    print(x^a)
  }

  Power2(3, 8)
#+END_SRC 

#+RESULTS:
: 
: [1] 6561

*** (c)
#+BEGIN_QUOTE
Using the ~Power2()~ function that you just wrote, compute 10³ ,
8¹⁷ , and 131³.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  Power2(10, 3)
  Power2(8, 17)
  Power2(131, 3)
#+END_SRC 

#+RESULTS:
: [1] 1000
: 
: [1] 2.2518e+15
: 
: [1] 2248091

*** (d)
#+BEGIN_QUOTE
Now create a new function, ~Power3()~ , that actually returns the
result ~x^a~ as an R object, rather than simply printing it to the
screen. That is, if you store the value ~x^a~ in an object called
~result~ within your function, then you can simply ~return()~ this
~result~, using the following line:

~return(result)~

The line above should be the last line in your function, before
the ~}~ symbol.
#+END_QUOTE

#+BEGIN_SRC R :results output :exports both
  Power3 <- function(x, a) {
    return(x^a)             # note has to be return() with brackets
  }

  Power3(3, 8)
#+END_SRC 

#+RESULTS:
: 
: [1] 6561

*** (e)
#+BEGIN_QUOTE
Now using the ~Power3()~ function, create a plot of ~f(x) = x²~. The
/x/-axis should display a range of integers from 1 to 10, and the
/y/-axis should display /x²/ . Label the axes appropriately, and use
an appropriate title for the figure. Consider displaying either the
/x/-axis, the /y/-axis, or both on the log-scale. You can do this by
using ~log=‘‘x’’ , log=‘‘y’’ , or log=‘‘xy’’~ as arguments to the
~plot()~ function.
#+END_QUOTE

#+BEGIN_SRC R :exports both :results graphics  :file img/ch04q12e_1.png :width 800
  data_frame(x=1:10, y=Power3(x, 2)) %>%
    ggplot(aes(x=x, y=y)) +
    geom_point() +
    labs(title = "Plot of y = = x²")
#+END_SRC

#+RESULTS:
[[file:img/ch04q12e_1.png]]

#+BEGIN_SRC R :exports both :results graphics  :file img/ch04q12e_2.png :width 800
  data_frame(x=1:10, y=Power3(x, 2)) %>%
    ggplot(aes(x=x, y=y)) +
    geom_point() +
    scale_x_log10() +
    scale_y_log10() +
    labs(title = "Plot of y = = x² on log₁₀ scales", x="log x", y="log y")
#+END_SRC

#+RESULTS:
[[file:img/ch04q12e_2.png]]

*** (f)
#+BEGIN_QUOTE
Create a function, ~PlotPower()~ , that allows you to create a plot of
~x~ against ~x^a~ for a fixed ~a~ and for a range of values of ~x~.
For instance, if you call

~> PlotPower(1:10, 3)~

then a plot should be created with an /x/-axis taking on values 1, 2,
... , 10, and a /y/-axis taking on values 1³ , 2³, ... , 10³.
#+END_QUOTE

#+BEGIN_SRC R :exports both :results graphics  :file img/ch04q12f_1.png :width 800
  PlotPower <- function(x, a) {
    data_frame(x=x, y=Power3(x, a)) %>%
      ggplot(aes(x=x, y=y)) +
      geom_point() +
      labs(title = paste("Plot of y = = x^", a))
  }

  PlotPower(1:10, 3)
#+END_SRC 

#+RESULTS:
[[file:img/ch04q12f_1.png]]

** Question 13
#+BEGIN_QUOTE
Using the ~Boston~ data set, fit classification models in order to
predict whether a given suburb has a crime rate above or below the
median. Explore logistic regression, LDA, and KNN models using various
subsets of the predictors. Describe your findings.
#+END_QUOTE

Let's set up a data frame where ~crim01~ shows if the crime rate is
above the median.

#+BEGIN_SRC R :results output :exports both
  boston <- Boston %>%
    as_tibble() %>%
    mutate(crim01 = ifelse(crim > median(crim), 1, 0))
  glimpse(boston)
  table(boston$crim01)
#+END_SRC 

#+RESULTS:
#+begin_example

Observations: 506
Variables: 15
$ crim    <dbl> 0.00632, 0.02731, 0.02729, 0.03237, 0.06905, 0.02985, 0.088...
$ zn      <dbl> 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.5, 12.5, 12.5, 12.5, 12.5...
$ indus   <dbl> 2.31, 7.07, 7.07, 2.18, 2.18, 2.18, 7.87, 7.87, 7.87, 7.87,...
$ chas    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
$ nox     <dbl> 0.538, 0.469, 0.469, 0.458, 0.458, 0.458, 0.524, 0.524, 0.5...
$ rm      <dbl> 6.575, 6.421, 7.185, 6.998, 7.147, 6.430, 6.012, 6.172, 5.6...
$ age     <dbl> 65.2, 78.9, 61.1, 45.8, 54.2, 58.7, 66.6, 96.1, 100.0, 85.9...
$ dis     <dbl> 4.0900, 4.9671, 4.9671, 6.0622, 6.0622, 6.0622, 5.5605, 5.9...
$ rad     <int> 1, 2, 2, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4,...
$ tax     <dbl> 296, 242, 242, 222, 222, 222, 311, 311, 311, 311, 311, 311,...
$ ptratio <dbl> 15.3, 17.8, 17.8, 18.7, 18.7, 18.7, 15.2, 15.2, 15.2, 15.2,...
$ black   <dbl> 396.90, 396.90, 392.83, 394.63, 396.90, 394.12, 395.60, 396...
$ lstat   <dbl> 4.98, 9.14, 4.03, 2.94, 5.33, 5.21, 12.43, 19.15, 29.93, 17...
$ medv    <dbl> 24.0, 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, 16.5, 18.9,...
$ crim01  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,...

  0   1 
253 253
#+end_example

Looking at the variables graphically:

#+BEGIN_SRC R :exports both :results graphics  :file img/ch04q13_1.png :width 800
  boston %>% mutate(crim01 = as.factor(crim01)) %>%
    gather(key="var", value="value", -crim01) %>%
    ggplot(aes(x=crim01, y=value)) +
      geom_boxplot() +
      facet_wrap(~ var, scales="free") +
      labs(title = "Boxplots of variables against crim01 above median")
#+END_SRC

#+RESULTS:
[[file:img/ch04q13_1.png]]

Let's use the ~indus~, ~nox~, ~age~, ~dis~ ~rad~ and ~tax~ variables
to build a model.

Split into training and test sets:

#+BEGIN_SRC R :results output :exports both
  set.seed(1)
  boston$id <- 1:nrow(boston)
  bostonTrain <- boston %>% sample_frac(0.75)
  bostonTest <- anti_join(boston, bostonTrain, by='id')
  nrow(bostonTrain)
  nrow(bostonTest)
#+END_SRC

#+RESULTS:
: 
: [1] 380
: 
: [1] 126

Perform logistic regression:

#+BEGIN_SRC R :results output :exports both
  bostonLr <- glm(crim01 ~ indus + nox + age + dis + rad + tax,
                  data = bostonTrain, family = binomial)
  summary(bostonLr)
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
glm(formula = crim01 ~ indus + nox + age + dis + rad + tax, family = binomial, 
    data = bostonTrain)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-1.98982  -0.24866   0.00025   0.01347   2.93912  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept) -27.193632   4.733897  -5.744 9.22e-09 ***
indus        -0.091500   0.051473  -1.778  0.07547 .  
nox          44.615304   8.522703   5.235 1.65e-07 ***
age           0.034487   0.011589   2.976  0.00292 ** 
dis           0.329600   0.177988   1.852  0.06405 .  
rad           0.533314   0.135968   3.922 8.77e-05 ***
tax          -0.007572   0.002923  -2.591  0.00958 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 526.75  on 379  degrees of freedom
Residual deviance: 174.92  on 373  degrees of freedom
AIC: 188.92

Number of Fisher Scoring iterations: 9
#+end_example

#+BEGIN_SRC R :results output :exports both
  bostonLrPredict <- data_frame(prob=predict(bostonLr, bostonTest, type="response"),
                                predict=ifelse(prob > 0.5, 1, 0),
                                actual=bostonTest$crim01)
  table(bostonLrPredict$predict, bostonLrPredict$actual)
#+END_SRC 

#+RESULTS:
: 
:    
:      0  1
:   0 59  8
:   1  6 53

Not bad, 88.9% accuracy.

Looking at the ~glm~ results, ~nox~ and ~rad~ stand out with the
lowest Pr(z) scores. What if we try a model with just those?

#+BEGIN_SRC R :results output :exports both
  bostonLr2 <- glm(crim01 ~ nox + rad,
                  data = bostonTrain, family = binomial)
  summary(bostonLr2)
#+END_SRC 

#+RESULTS:
#+begin_example

Call:
glm(formula = crim01 ~ nox + rad, family = binomial, data = bostonTrain)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-1.96838  -0.33780   0.00104   0.01449   2.52626  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept) -17.4906     2.2189  -7.883  3.2e-15 ***
nox          28.1508     3.7090   7.590  3.2e-14 ***
rad           0.4265     0.1151   3.705 0.000211 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 526.75  on 379  degrees of freedom
Residual deviance: 200.60  on 377  degrees of freedom
AIC: 206.6

Number of Fisher Scoring iterations: 8
#+end_example

#+BEGIN_SRC R :results output :exports both
  bostonLr2Predict <- data_frame(prob=predict(bostonLr2, bostonTest, type="response"),
                                 predict=ifelse(prob > 0.5, 1, 0),
                                 actual=bostonTest$crim01)
  table(bostonLr2Predict$predict, bostonLr2Predict$actual)
#+END_SRC 

#+RESULTS:
: 
:    
:      0  1
:   0 61 10
:   1  4 51

The same accuracy as before.

Let's try LDA with just those variables

#+BEGIN_SRC R :results output :exports both
    bostonLda <- lda(crim01 ~ nox + rad,
                     data = bostonTrain)
    bostonLdaPredict <- data_frame(predict=predict(bostonLda, bostonTest, 
                                                   type="response")$class,
                                   actual=bostonTest$crim01)
    table(bostonLdaPredict$predict, bostonLdaPredict$actual)
#+END_SRC 

#+RESULTS:
: 
:    
:      0  1
:   0 63 16
:   1  2 45

85.7% accuracy. Now let's try kNN. As we want to try several values of
/k/, let's create a function that can calculate the accuracy (I should
have written that function earlier).

#+BEGIN_SRC R :results output :exports both
  tr = dplyr::select(bostonTrain, nox, rad)
  te = dplyr::select(bostonTest, nox, rad)

  bostonKnn <- function(k) {
    model <- knn(tr, te, bostonTrain$crim01, k=k)
    results <- table(model, bostonTest$crim01)
    return((results[1,1] + results[2,2]) /
           (results[1,1] + results[2,2] + results[1,2] + results[2,1]))
  }
  
  sapply(c(1, 2, 5, 10, 20, 50), bostonKnn)
#+END_SRC 

#+RESULTS:
: 
: [1] 0.9285714 0.9206349 0.9365079 0.9365079 0.9365079 0.8650794

/k/ = 1 gives the best accuracy of 93.4%, though other values of /k/
give close results. And this was the best overall result of the three
classification methods.

